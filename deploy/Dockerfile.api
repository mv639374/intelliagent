# # deploy/Dockerfile.api
# # Stage 1: Builder - Install dependencies
# FROM nvidia/cuda:12.4.1-cudnn-runtime-ubuntu22.04 AS builder

# # Install Python 3.11
# RUN apt-get update && apt-get install -y python3.11 python3-pip && \
#     ln -sf /usr/bin/python3.11 /usr/bin/python3 && \
#     ln -sf /usr/bin/python3.11 /usr/bin/python && \
#     rm -rf /var/lib/apt/lists/*


# # Install system dependencies
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     tesseract-ocr \
#     poppler-utils \
#     build-essential \
#     curl \
#     && rm -rf /var/lib/apt/lists/*


# # Install uv
# COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# WORKDIR /app

# # Copy ONLY dependency files first (for better caching)
# COPY backend/pyproject.toml backend/uv.lock* ./

# ENV UV_HTTP_TIMEOUT=1000

# # Install dependencies system-wide (NO editable install yet)
# RUN uv pip install --system --no-cache -r pyproject.toml

# # Download spaCy model
# RUN python -m spacy download en_core_web_sm

# # Install PyTorch with CUDA
# RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124


# # ---
# # Stage 2: Runtime - Slim final image
# FROM nvidia/cuda:12.4.1-cudnn-runtime-ubuntu22.04

# # Install runtime system dependencies
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     tesseract-ocr \
#     poppler-utils \
#     && rm -rf /var/lib/apt/lists/*

# # Install Python 3.11 in runtime stage
# RUN apt-get update && apt-get install -y python3.11 python3-pip && \
#     ln -sf /usr/bin/python3.11 /usr/bin/python3 && \
#     ln -sf /usr/bin/python3.11 /usr/bin/python && \
#     rm -rf /var/lib/apt/lists/*


# # Set environment variables
# ENV PYTHONDONTWRITEBYTECODE=1 \
#     PYTHONUNBUFFERED=1

# WORKDIR /app

# # Copy installed packages from builder
# COPY --from=builder /usr/lib/python3.11 /usr/lib/python3.11
# COPY --from=builder /usr/local /usr/local


# # Application code will be mounted via volume in dev (see docker-compose)

# # Expose port
# EXPOSE 8000

# # Run with reload for development
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]




# deploy/Dockerfile.api
# syntax=docker/dockerfile:1.4

FROM nvidia/cuda:12.4.1-cudnn-runtime-ubuntu22.04

# Install Python 3.11 and system dependencies in one layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.11 \
    python3-pip \
    tesseract-ocr \
    poppler-utils \
    build-essential \
    curl \
    && ln -sf /usr/bin/python3.11 /usr/bin/python \
    && rm -rf /var/lib/apt/lists/*

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/

WORKDIR /app

# Copy ONLY pyproject.toml first (critical for caching)
COPY backend/pyproject.toml ./

# Set timeout
ENV UV_HTTP_TIMEOUT=1000

# Install PyTorch FIRST in separate layer (heavy, cached separately)
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir \
    torch torchvision torchaudio \
    --index-url https://download.pytorch.org/whl/cu124

RUN pip install --upgrade pip
# Install other dependencies with uv (cached separately)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install --system -r pyproject.toml

# Download spaCy model (cached separately)
RUN --mount=type=cache,target=/root/.cache/pip \
    python -m spacy download en_core_web_sm

# Copy application code (will be overridden by volume mount in dev)
COPY backend /app

# Environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Expose port
EXPOSE 8000

# Start server with hot reload
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

